#!/bin/bash

# git clone git@git.twenga.com:aa/twgit.git [path]
# cd [path]
# Install: sudo make install --always-make
# ou /bin/bash [path]/twgit
#
# Sur le modèle de http://github.com/nvie/gitflow

# Dans ~/.bash_profile :
# function get_git_branch {
#         local branch=$(git branch --no-color 2>/dev/null | grep -P '^\*' | sed 's/* //')
#         if [ ! -z "$branch" ]; then
#                 echo -n " \[\e[1;30m\]git\[\e[1;35m\]$branch"
#                 [ `git status --porcelain --ignore-submodules=all | wc -l` -ne 0 ] && echo '*'
#         fi
# }

#export PROMPT_COMMAND='PS1="\[\e[0;32m\]\h:\w$(get_git_branch)\[\e[1;32m\]\\$\[\e[m\] "'

# TODO ne pas enchaîner les fetch à chaque commande twgit ?
# TODO merge d'une feature
# TODO merge auto multi features
# TODO doc author ?
# TODO couplage options_handler::require_parameter() avec usage()
# TODO ui.inc.sh pas assez sûr niveau collision de noms...
# TODO camelCase et autre_notation en même temps...
# TODO sujet des redmine ticket/tickets du projet/surticket+soustickets
# TODO est-ce que la liste des committers d'une branche ne remonterait pas trop loin ?
# TODO comment gérer les branches locales fermées à partir d'un autre dépôt ?
# TODO créer une fonction d'init qui effectue la transition vers ce nouveau process ?
# TODO bcp d'endroits ne passent pas encore par displayQuotedEnum()
# TODO créer un alias à la place de /usr/local/bin/twgit ?

if [ "$DEBUG" = "1" ]; then
	set -x
fi

# Includes :
. `dirname $0`/conf/config.inc.sh
. $TWGIT_INC_DIR/common.inc.sh

# Duplication des flux à des fins d'historisation :
log_date="$(date "+%Y-%m-%d %H:%M:%S")"
log_call="$0 $@"
exec 2> >(printf -- "$TWGIT_HISTORY_SEPARATOR" "$log_date" "$log_call" >> $TWGIT_HISTORY_ERROR_PATH; tee -a $TWGIT_HISTORY_ERROR_PATH >&2)
exec > >(printf -- "$TWGIT_HISTORY_SEPARATOR" "$log_date" "$log_call" >> $TWGIT_HISTORY_LOG_PATH; tee -a $TWGIT_HISTORY_LOG_PATH)



##
# Affiche l'aide
#
function usage () {
	echo; help 'Usage:'
	help_detail 'twgit <command> [<action>]'
	help_detail '    Always provide branch names without prefix:'
	help_detail "    - '$TWGIT_PREFIX_FEATURE', '$TWGIT_PREFIX_RELEASE', '$TWGIT_PREFIX_HOTFIX', (tag) '$TWGIT_PREFIX_TAG'"

	echo; help 'Available commands are:'
	help_detail '<b>feature</b>   Manage your feature branches.'
	help_detail '<b>release</b>   Manage your release branches.'
	help_detail '<b>hotfix</b>    Manage your hotfix branches.'
	help_detail '<b>tag</b>       Manage your tags.'
	echo
	help_detail '<b>update</b>    Force update twgit check.'
	help_detail '<b>[help]</b>    Display this help.'
	echo; help 'See also:'
	help_detail "Try 'twgit <command> [help]' for more details."
	echo
}

##
# Appelle l'action demandée ("cmd_$2") sur la commande spécifiée ($1).
# Les paramètres surnumérères sont passés à la commande.
#
# @param string $1 commande demandée
# @param string $2 nom de l'action demandée, 'help' par défaut
#
function main () {
	if [ $# -lt 1 ]; then
		usage
		exit 1
	fi

	# load command:
	if [ ! -z "$1" ]; then
		local command="$1"; shift
		local command_file="$TWGIT_INC_DIR/twgit_$command.inc.sh";
		if [ "$command" = 'help' ]; then
			usage; exit 0
		elif [ "$command" = 'update' ]; then
			autoupdate 'force'; exit 0
		elif [ ! -e "$command_file" ]; then
			error "Command not found: '$command'"
			usage
			exit 1
		else
			. "$command_file"
		fi
	fi

	# run the specified action:
	local action='help'
	if [ ! -z "$1" ]; then
		action="$1"; shift
	fi
	local action_func_name="cmd_$action"
	if ! type "$action_func_name" >/dev/null 2>&1; then
		error "Unknown action: '$action'"
		usage
		exit 1
	else
		$action_func_name "$@"
	fi
}

[ "$1" != "update" ] && [ "$TWGIT_UPDATE_AUTO" = "1" ] && autoupdate
assert_git_configured
main "$@"
